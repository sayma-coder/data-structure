# data-structure
def knapSack(c, wt, pro, n):
    K = [[0 for x in range(c + 1)] for x in range(n + 1)]
  
    # Build table K[][] in bottom up manner
    for i in range(n + 1):
        for w in range(c + 1):
            if i == 0 or w == 0:
                K[i][w] = 0
            elif wt[i-1] <= w:
                K[i][w] = max(pro[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w])
            else:
                K[i][w] = K[i-1][w]
  
    return K[n][c]
  
# Driver program to test above function
pro = [15, 25, 13,23]
wt = [2,6,12,9]
c = 20
n = len(pro)
print(knapSack(c, wt, pro, n)
